var store = [,{
    "title": null,
    "excerpt":"BirdSongs  A python package to analyze, visualize and generate synthetic birdsongs.         Table of Contents             Overview                 Objective     Physical Model     Implementation     Programming Object Oriented (POO)     Conclusions     References              Literature         Software         Audios Dataset                Overview   Study and pakcing of the physical model of the motor gestures of birdsongss. This model explains the physics of birdsongs by modeling the organs involved in sound production in birds (syrinx, trachea, glottis, Oro-Oesophageal Cavity (OEC), and beak) with oridary differential equations (EDOs). In this work, a Python package is developed to analyze, visualize and generate synthetic birdsongs using the motor gestures model and recorded samples of birdsongs. To automate the model, the problem is formulated as an minimization problem with two control parameters (air sac pressure of the bird’s bronchi and labial tension) and solved using numerical methods, signal processing tools, and numerical optimization. The package is tested by generating comparable birdsongs, solves the minimization problem using recorded samples of birdsongs and comparing the fundamental frequency (denoted as FF, F0, or also called pitch) and spectral conent index (SCI) of both birdsongs.    The dissertation document is made with latex, it is located on github at github.com/saguileran/birdsongs/ in the dissertation branch. You can download and compile it using tex software (texmaker).                              Objective   Design, development, and evaluation of a computational-physical model to generating synthetic bird songs from recorded samples.  Physical Model   Schematic implementation of the physical model motor gestures of birdsongs: syrinx, trachea, glottis, OEC, and beak.    Implementation   Using the previous objects defined, the optimization problem is solved by following the next diagram     Programming Object Oriented (POO)   Taking advantege of POO the repetition of long codes is avoid. Using this programming paradigm, the execution and implementation of the model is fast and easy. Five objects ared created to solve the optimization problem and analyze the synthetic syllables:       Syllable: define a object from audio syllable with its tempo and spectral features     Optimizer: define a object to optimize function from method and syllables      BirdSong: define a object to read and split an audio song in syllables     Ploter: define a object to plot real and synthec syllables or songs     Paths: define a object to organize folders location   In order to understand the diagram methodology, the following icons will be used.      Conclusions        The SCI score gives comparable results to finding the optimal pressure parameters coefficients, however it is not always sufficient since the noise can be interpreted as harmonics or spectral content. An improvement is to refine the objective function that find these parametric coefficients     The model successfully simulated several syllables of Zonotrichia capensis with different sound quality. The best sounds to generate are the longer, simpler and clear syllables which were simulated with high accuracy. The thrilled syllables can be well-generated using chuncks, small parts of syllables, but it requires tuning the pitch threshold.     The most problematic and difficult syllables are the noisy and with high spectral content audios, in which strong harmonics are present making the pitch computing hard or even impossible to compute correctly. Although for some audios is sufficient to change the pitch threshold detector, it does not work for all of them.      References  Literature  [1] Amador, A., Perl, Y. S., Mindlin, G. B., &#38; Margoliash, D. (2013). Elemental gesture dynamics are encoded by song premotor cortical neurons. Nature 2013 495:7439, 495(7439), 59–64. https://doi.org/10.1038/nature11967  Software   [2] Newville, M., Stensitzki, T., Allen, D. B., &#38; Ingargiola, A. (2014). LMFIT: Non-Linear Least-Square Minimization and Curve-Fitting for Python. https://doi.org/10.5281/ZENODO.11813   [3] Ulloa, J. S., Haupert, S., Latorre, J. F., Aubin, T., &#38; Sueur, J. (2021). scikit-maad: An open-source and modular toolbox for quantitative soundscape analysis in Python. Methods in Ecology and Evolution, 12(12), 2334–2340. https://doi.org/10.1111/2041-210X.13711 Dataset     [4] McFee, B., Raffel, C., Liang, D., Ellis, D. P., McVicar, M., Battenberg, E., &amp; Nieto, O. &#38; (2015). librosa: Audio and music signal analysis in python.   In Proceedings of the 14th python in science conference , 12(12), (Vol. 8). Librosa   Audios Dataset  [5] Xeno-canto Foundation and Naturalis Biodiversity Center &#38; (2005). xeno-canto:      Sharing bird sounds from around the world.   Dissertation Audios Dataset     [6] Ther Cornell Lab of Ornithology &#38; (2005). Macaulay Library - ebird , ebird.com  ","url": "http://localhost:4000/"
  },{
    "title": null,
    "excerpt":"var idx = lunr(function () {   this.field('title')   this.field('excerpt')   this.field('categories')   this.field('tags')   this.ref('id')    this.pipeline.remove(lunr.trimmer)    for (var item in store) {     this.add({       title: store[item].title,       excerpt: store[item].excerpt,       categories: store[item].categories,       tags: store[item].tags,       id: item     })   } });  $(document).ready(function() {   $('input#search').on('keyup', function () {     var resultdiv = $('#results');     var query = $(this).val().toLowerCase();     var result =       idx.query(function (q) {         query.split(lunr.tokenizer.separator).forEach(function (term) {           q.term(term, { boost: 100 })           if(query.lastIndexOf(\" \") != query.length-1){             q.term(term, {  usePipeline: false, wildcard: lunr.Query.wildcard.TRAILING, boost: 10 })           }           if (term != \"\"){             q.term(term, {  usePipeline: false, editDistance: 1, boost: 1 })           }         })       });     resultdiv.empty();     resultdiv.prepend(''+result.length+' Result(s) found ');     for (var item in result) {       var ref = result[item].ref;       if(store[ref].teaser){         var searchitem =           ''+             ''+               ''+                 ''+store[ref].title+''+               ' '+               ''+                 ''+               ''+               ''+store[ref].excerpt.split(\" \").splice(0,20).join(\" \")+'... '+             ''+           '';       }       else{     \t  var searchitem =           ''+             ''+               ''+                 ''+store[ref].title+''+               ' '+               ''+store[ref].excerpt.split(\" \").splice(0,20).join(\" \")+'... '+             ''+           '';       }       resultdiv.append(searchitem);     }   }); }); ","url": "http://localhost:4000/assets/js/lunr/lunr-en.js"
  },{
    "title": null,
    "excerpt":"step1list = new Array(); step1list[\"ΦΑΓΙΑ\"] = \"ΦΑ\"; step1list[\"ΦΑΓΙΟΥ\"] = \"ΦΑ\"; step1list[\"ΦΑΓΙΩΝ\"] = \"ΦΑ\"; step1list[\"ΣΚΑΓΙΑ\"] = \"ΣΚΑ\"; step1list[\"ΣΚΑΓΙΟΥ\"] = \"ΣΚΑ\"; step1list[\"ΣΚΑΓΙΩΝ\"] = \"ΣΚΑ\"; step1list[\"ΟΛΟΓΙΟΥ\"] = \"ΟΛΟ\"; step1list[\"ΟΛΟΓΙΑ\"] = \"ΟΛΟ\"; step1list[\"ΟΛΟΓΙΩΝ\"] = \"ΟΛΟ\"; step1list[\"ΣΟΓΙΟΥ\"] = \"ΣΟ\"; step1list[\"ΣΟΓΙΑ\"] = \"ΣΟ\"; step1list[\"ΣΟΓΙΩΝ\"] = \"ΣΟ\"; step1list[\"ΤΑΤΟΓΙΑ\"] = \"ΤΑΤΟ\"; step1list[\"ΤΑΤΟΓΙΟΥ\"] = \"ΤΑΤΟ\"; step1list[\"ΤΑΤΟΓΙΩΝ\"] = \"ΤΑΤΟ\"; step1list[\"ΚΡΕΑΣ\"] = \"ΚΡΕ\"; step1list[\"ΚΡΕΑΤΟΣ\"] = \"ΚΡΕ\"; step1list[\"ΚΡΕΑΤΑ\"] = \"ΚΡΕ\"; step1list[\"ΚΡΕΑΤΩΝ\"] = \"ΚΡΕ\"; step1list[\"ΠΕΡΑΣ\"] = \"ΠΕΡ\"; step1list[\"ΠΕΡΑΤΟΣ\"] = \"ΠΕΡ\"; step1list[\"ΠΕΡΑΤΑ\"] = \"ΠΕΡ\"; step1list[\"ΠΕΡΑΤΩΝ\"] = \"ΠΕΡ\"; step1list[\"ΤΕΡΑΣ\"] = \"ΤΕΡ\"; step1list[\"ΤΕΡΑΤΟΣ\"] = \"ΤΕΡ\"; step1list[\"ΤΕΡΑΤΑ\"] = \"ΤΕΡ\"; step1list[\"ΤΕΡΑΤΩΝ\"] = \"ΤΕΡ\"; step1list[\"ΦΩΣ\"] = \"ΦΩ\"; step1list[\"ΦΩΤΟΣ\"] = \"ΦΩ\"; step1list[\"ΦΩΤΑ\"] = \"ΦΩ\"; step1list[\"ΦΩΤΩΝ\"] = \"ΦΩ\"; step1list[\"ΚΑΘΕΣΤΩΣ\"] = \"ΚΑΘΕΣΤ\"; step1list[\"ΚΑΘΕΣΤΩΤΟΣ\"] = \"ΚΑΘΕΣΤ\"; step1list[\"ΚΑΘΕΣΤΩΤΑ\"] = \"ΚΑΘΕΣΤ\"; step1list[\"ΚΑΘΕΣΤΩΤΩΝ\"] = \"ΚΑΘΕΣΤ\"; step1list[\"ΓΕΓΟΝΟΣ\"] = \"ΓΕΓΟΝ\"; step1list[\"ΓΕΓΟΝΟΤΟΣ\"] = \"ΓΕΓΟΝ\"; step1list[\"ΓΕΓΟΝΟΤΑ\"] = \"ΓΕΓΟΝ\"; step1list[\"ΓΕΓΟΝΟΤΩΝ\"] = \"ΓΕΓΟΝ\";  v = \"[ΑΕΗΙΟΥΩ]\"; v2 = \"[ΑΕΗΙΟΩ]\"  function stemWord(w) {   var stem;   var suffix;   var firstch;   var origword = w;   test1 = new Boolean(true);    if(w.length '+result.length+' Result(s) found ');     for (var item in result) {       var ref = result[item].ref;       if(store[ref].teaser){         var searchitem =           ''+             ''+               ''+                 ''+store[ref].title+''+               ' '+               ''+                 ''+               ''+               ''+store[ref].excerpt.split(\" \").splice(0,20).join(\" \")+'... '+             ''+           '';       }       else{     \t  var searchitem =           ''+             ''+               ''+                 ''+store[ref].title+''+               ' '+               ''+store[ref].excerpt.split(\" \").splice(0,20).join(\" \")+'... '+             ''+           '';       }       resultdiv.append(searchitem);     }   }); }); ","url": "http://localhost:4000/assets/js/lunr/lunr-gr.js"
  },{
    "title": null,
    "excerpt":"var store = [   {%- for c in site.collections -%}     {%- if forloop.last -%}       {%- assign l = true -%}     {%- endif -%}     {%- assign docs = c.docs | where_exp:'doc','doc.search != false' -%}     {%- for doc in docs -%}       {%- if doc.header.teaser -%}         {%- capture teaser -%}{{ doc.header.teaser }}{%- endcapture -%}       {%- else -%}         {%- assign teaser = site.teaser -%}       {%- endif -%}       {         \"title\": {{ doc.title | jsonify }},         \"excerpt\":           {%- if site.search_full_content == true -%}             {{ doc.content | newline_to_br |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \"|             strip_html | strip_newlines | jsonify }},           {%- else -%}             {{ doc.content | newline_to_br |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \"|             strip_html | strip_newlines | truncatewords: 50 | jsonify }},           {%- endif -%}         \"categories\": {{ doc.categories | jsonify }},         \"tags\": {{ doc.tags | jsonify }},         \"url\": {{ doc.url | relative_url | jsonify }},         \"teaser\": {{ teaser | relative_url | jsonify }}       }{%- unless forloop.last and l -%},{%- endunless -%}     {%- endfor -%}   {%- endfor -%}{%- if site.lunr.search_within_pages -%},   {%- assign pages = site.pages | where_exp:'doc','doc.search != false' -%}   {%- for doc in pages -%}     {%- if forloop.last -%}       {%- assign l = true -%}     {%- endif -%}   {     \"title\": {{ doc.title | jsonify }},     \"excerpt\":         {%- if site.search_full_content == true -%}           {{ doc.content | newline_to_br |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \"|           strip_html | strip_newlines | jsonify }},         {%- else -%}           {{ doc.content | newline_to_br |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \"|           strip_html | strip_newlines | truncatewords: 50 | jsonify }},         {%- endif -%}       \"url\": {{ doc.url | absolute_url | jsonify }}   }{%- unless forloop.last and l -%},{%- endunless -%}   {%- endfor -%} {%- endif -%}] ","url": "http://localhost:4000/assets/js/lunr/lunr-store.js"
  },{
    "title": null,
    "excerpt":"@charset \"utf-8\";  @import \"minimal-mistakes/skins/{{ site.minimal_mistakes_skin | default: 'default' }}\"; // skin @import \"minimal-mistakes\"; // main partials  $content-width: 100%; $link-color: blue;  .centerHuge { \tdisplay: block; \tmargin-left: auto; \tmargin-right: auto; \twidth: 90%; }  .page__content { \ttext-align: justify;   }  .centerImage   {    text-align:center;    margin-left: auto;    margin-right: auto;    display:block;   }     #toc_container {     background: #f9f9f9 none repeat scroll 0 0;     border: 1px solid #aaa;     display: table;     font-size: 90%;     margin-bottom: 1em;     padding: 20px;     width: 500px; \t }  .toc_title {     font-weight: 800; \ttext-align: center; \tfont-size: 30px; }  #toc_container li, #toc_container ul, #toc_container ul li{     list-style: outside circle none !important; }  table.center {     margin-left:auto;      margin-right:auto;   }  .row {   display: flex; }  .column {   flex: 50.0%;   padding: 5px; }","url": "http://localhost:4000/assets/css/main.css"
  },{
    "title": "Results",
    "excerpt":"  Results obtained with the `birdsongs` package for some birds, humman whistles, and frogs audios.   ## Data Used   The audios used were    | Scientific Name  |  Common Name  | Location | Pitch Complexity | Animal | Comparability*  | ------------------ | :------------------: | :------------------: | :------------------: | :------------------: |:------------------: | | Zonotrichia Capensis| Copeton | South America | Simple pitch | Bird | Good | Rhinocryptidae | Tapaculos | South America    southern Central America.| Medium | Bird | Good | Mimus Gilvus | Sinsonte | Central America   eastern South America | Complex | Bird |Medium | Physalaemus Cuvieri | Rana Llorona | South America | Medium | Amphibian  | | Humman \tWhistle | Whistle | Anywhere | Easy-Medium-Complex | Human Being  |  *It means how good is the quality of synthetic bird songs compared to real samples.  ## Sounds  Sounds obtained, the left side is the synthetic birdsong while righ side is real recorded birdsongs.           Ocellated Tapaculo - XC104508                          Your browser doesn't support this audio file. Here is a       link to the audio instead.                                  Your browser doesn't support this audio file. Here is a       link to the audio instead.               Euphonia Laniirostris - C527995                          Your browser doesn't support this audio file. Here is a       link to the audio instead.                                  Your browser doesn't support this audio file. Here is a       link to the audio instead.                           Zonotrichia capensis - XC11293             Euphonia Laniirostris Crassirostris - C541457                        ## Waveforms and Spectrograms  {% include gallery id=\"gallery_sounds\" caption=\"Waveforms and spectrograms\" %}   ## Parameter Space  {% include gallery id=\"gallery_parameters_space\" caption=\"Motor gestures paths, paths found in the paramter space\" %}  ## Scored Variables  {% include gallery id=\"results\" caption=\"Scored Variables: Fundamental Frequency (FF) and Spectral Content Index (SCI)\" %}      --- # Are all the motor gesture curves of Zonotrichia Capensis the same?  ## Used Audios  | Scientific Name  |  XC id  | Country | Location | Number of Syllables | | ------------------ | :------------------: | :------------------: | :------------------: | :------------------: | | Zonotrichia Capensis | 11293  | Colombia | Quebrada la Vieja, Bogota  | 3 | Zonotrichia Capensis | 338156 | Colombia | Universidad Pedagógica Nacional  Sede Parque Nacional, Bogotá  | 3 | Zonotrichia Capensis | 462515 | Argentina | Estancia La Candelaria,  Buenos Aires | 4 | Zonotrichia Capensis | 391056 | Argentina | Victoria, Entre Ríos | 4 | Acropternis orthonyx | 428484 | Colombia |  Reserva Rio Blanco,  Aguas de Manizales, Manizales | 2  ## Whole Audio Sound Wave and Spectrograms   {% include gallery id=\"whole_songs\" caption=\"Waveforms and spectrograms of whole audio songs\" %}             XC11293                         Your browser doesn't support this audio file. Here is a       link to the audio instead.                           XC338156                         Your browser doesn't support this audio file. Here is a       link to the audio instead.                         XC462515                         Your browser doesn't support this audio file. Here is a       link to the audio instead.                                XC391056                         Your browser doesn't support this audio file. Here is a       link to the audio instead.                         XC428484                         Your browser doesn't support this audio file. Here is a       link to the audio instead.                      ## Audio Sounds  XC11293 - Zonotrichia capensis          syllable 1                          Your browser doesn't support this audio file. Here is a       link to the audio instead.                                  Your browser doesn't support this audio file. Here is a       link to the audio instead.                         syllable 2                          Your browser doesn't support this audio file. Here is a       link to the audio instead.                                  Your browser doesn't support this audio file. Here is a       link to the audio instead.                         syllable 3                          Your browser doesn't support this audio file. Here is a       link to the audio instead.                                  Your browser doesn't support this audio file. Here is a       link to the audio instead.                  XC338156 - Zonotrichia capensis          syllable 1                          Your browser doesn't support this audio file. Here is a       link to the audio instead.                                  Your browser doesn't support this audio file. Here is a       link to the audio instead.                         syllable 2                          Your browser doesn't support this audio file. Here is a       link to the audio instead.                                  Your browser doesn't support this audio file. Here is a       link to the audio instead.                         syllable 3                          Your browser doesn't support this audio file. Here is a       link to the audio instead.                                  Your browser doesn't support this audio file. Here is a       link to the audio instead.                  XC462515 - Zonotrichia capensis          syllable 1                          Your browser doesn't support this audio file. Here is a       link to the audio instead.                                  Your browser doesn't support this audio file. Here is a       link to the audio instead.                         syllable 2                          Your browser doesn't support this audio file. Here is a       link to the audio instead.                                  Your browser doesn't support this audio file. Here is a       link to the audio instead.                         syllable 3                          Your browser doesn't support this audio file. Here is a       link to the audio instead.                                  Your browser doesn't support this audio file. Here is a       link to the audio instead.                          syllable 4                          Your browser doesn't support this audio file. Here is a       link to the audio instead.                                  Your browser doesn't support this audio file. Here is a       link to the audio instead.                  XC391056 - Zonotrichia capensis          syllable 1                          Your browser doesn't support this audio file. Here is a       link to the audio instead.                                  Your browser doesn't support this audio file. Here is a       link to the audio instead.                         syllable 2                          Your browser doesn't support this audio file. Here is a       link to the audio instead.                                  Your browser doesn't support this audio file. Here is a       link to the audio instead.                         syllable 3                          Your browser doesn't support this audio file. Here is a       link to the audio instead.                                  Your browser doesn't support this audio file. Here is a       link to the audio instead.                         syllable 4                          Your browser doesn't support this audio file. Here is a       link to the audio instead.                                  Your browser doesn't support this audio file. Here is a       link to the audio instead.                  XC428484 - Ocellated Tapaculo          syllable 1                          Your browser doesn't support this audio file. Here is a       link to the audio instead.                                  Your browser doesn't support this audio file. Here is a       link to the audio instead.                         syllable 2                          Your browser doesn't support this audio file. Here is a       link to the audio instead.                                  Your browser doesn't support this audio file. Here is a       link to the audio instead.                    ## Waveforms and Spectrograms  {% include gallery id=\"Zonotrichia_WV\" caption=\"Waveforms and spectrograms\" %}   ## Parameter Space  {% include gallery id=\"Zonotrichia_MG\" caption=\"Motor gestures paths, paths found in the paramter space\" %}  ## Scored Variables  {% include gallery id=\"Zonotrichia_results\" caption=\"Scored Variables: Fundamental Frequency (FF) and Spectral Content Index (SCI)\" %}  ## Motor Gestures   ---  [Try birdsongs Package!]({{ \"https://github.com/saguileran/birdsongs\" | relative_url }}){: .btn .btn--success .btn--large .btn--mx-auto} ","url": "http://localhost:4000/results/"
  },{
    "title": "Use",
    "excerpt":"Here you can find a tutorial of how to download, install and use the `birdsongs` package.  # Installation  ## Requirments  `birdsong` is implemented in python 3.8 and requires:   - librosa - lmfit - scipy - sympy - numpy - pandas - matplotlib - playsound - PeakUtils - mpl_pan_zoom - mpl_point_clicker - scikit_learn - scikit_maad - setuptools - ipython - pygobject - ffmpeg       ## Downloading  In order to use birdsongs, clone the repository and enter to the folder repository  ```bat git clone https://github.com/saguileran/birdsongs.git cd birdsongs ``` you can verify the current branch with the command `git branch -a`. You have to be in `main` branch, to change the branch use the command `git checkout main`.  The next step is to install the required packages, any of the following commands lines will work  ```bat pip install -r ./requirements.txt # python -m pip install -r ./requirements.txt  # (equivalent) ```   Install the birdsong package  ```bat python .\\setup.py install ```  That's all!        Take a look at the tutorials notebooks for basic uses: physical model implementation, [motor-gestures.ipynb](./tutorials/motor-gestures.ipynb); define and generate a syllable from a recorded birdsong, [syllable.ipynb](./tutorials/syllable.ipynb); or to generate a whole birdsong, several syllables, [birdsong.ipynb](./tutorials/birdsong.ipynb),  # Use  ## Define  Import the package as `bs`   ```python import birdsongs as bs ```      Define the ploter and paths objects, optionally you can specify the audio folder or enable to save figures   ```python # audios = \"path\\to\\audios\"     # default examples/audios/ # root = \"path\\to\\audios\"       # default ./ # bird_name = \"path\\to\\audios\"  # default None  ploter = bs.Ploter(save=True)  # images are save at ./examples/results/Images/ paths  = bs.Paths()            # root, audios_path, bird_name ```  Displays the audios found with the `paths.AudiosFiles()` function, if the folder has a *spreadsheet.csv* file this functions displays all the information about the files inside the folder.  **BirdSong**    Defining and plotting the wave sound and spectrogram of a birdsong object  ```python birdsong = bs.BirdSong(paths, no_file=0, NN=1024, umbral_FF=1.0,                        #tlim=(t0,tend), flim=(f0,fmax) # other features                       ) ploter.Plot(birdsong, FF_on=False)  # plot the wave sound and spectrogram birdsong.Play()                     # in notebook useAudioPlay(birdsong) ```  **Syllables**    Define the syllables using time intervals of interest from the whole birdsong. You can choose the points with the `ploter.Plot()` function by changing the value of `SelectTime_on` to `True`      ```python ploter.Plot(birdsong, FF_on=False, SelectTime_on=True) # selct  time_intervals = Positions(ploter.klicker)             # save  time_intervals                                         # displays  syllable = bs.Syllable(birdsong, tlim=time_intervals[0], NN=birdsong.NN, Nt=30,                        umbral_FF=birdsong.umbral_FF, ide=\"syllable\") ploter.Plot(syllable, FF_on=True); ```     ## Solve    The last step consists in defining the optimizer object to generate the synthetic syllable (song), solving the optimization problem. For example, to generate the synthetic syllable (or birdsong) with the previously defined time intervals   ```python brute_kwargs = {'method':'brute', 'Ns':11}          # optimization mehotd. Ns is the number of grid points optimizer    = bs.Optimizer(syllable, brute_kwargs) # optimizer object optimal_gm   = optimizer.OptimalGamma(syllable)     # find optimal gamma   optimizer.OptimalParams(syllable, Ns=11)            # find optimal parameters coefficients #syllable, synth_syllable = optimizer.SongByTimes(time_intervals)   # find optimal parameters over the time intervals ```      define the optimal synthetic syllable object with the values found above  ```python synth_syllable = syllable.Solve(syllable.p) ```  ## Visualize    Visualize and write the optimal synthetic audio       ```python ploter.Plot(synth_syllable);                # sound wave and spectrogram of the synthetic syllable ploter.PlotVs(synth_syllable);              # physical model variables over the time ploter.PlotAlphaBeta(synth_syllable);       # motor gesture curve in the parametric space ploter.Syllables(syllable, synth_syllable); # synthetic and real syllables ploter.Result(syllable, synth_syllable);    # scoring variables and other spectral features  birdsong.WriteAudio();  synth_syllable.WriteAudio(); # write both audios at ./examples/results/Audios ```    ## Note      To generate a single synthetic syllable (chunck) you must have defined a birdsong (syllable), the process is as follows:  1. Define a paths and ploter object. 2. Use the previous path obeject to define a birdsong (syllable) object, it also requeries the file number (birdsong for a syllable). Here you can define the window FFT length and the umbral threshold to compute the pitch. 3. Define an optimization object with a dictionary of the method name and its parameters. 4. Find the optimal gamma (γ), for a single syllable or for a set of syllables defined from time intervals. 5. Find the optimal labia parameters, the motor gesture curve: air-sac pressure (α) and labia tension (β). 6. Generate the synthetic birdsong from the previous control parameters found. 7. Plot and save all the syrinx, scoring, and result variables. 8. Write the syllable audios defined both synthetic and real.        The repository has some audio examples, in [./examples/audios](https://github.com/saguileran/birdsongs/tree/main/examples/audios) folder. You can download and store your own audios in the same folder or enter the audio folder path to the Paths object, the package also has a function to download audios from Xeno-Canto: birdsong.util.DownloadXenoCanto().  The audios **must** be in WAV format or birdosngs will not import them, we suggest use [Audacity](https://www.audacityteam.org/) to convert the audios without any problem.  ---  Now you are able to generate a synthetic syllable using a recorded birdsong.","url": "http://localhost:4000/use/"
  },{
    "title": null,
    "excerpt":" {% if page.xsl %} {% endif %} {% assign collections = site.collections | where_exp:'collection','collection.output != false' %}{% for collection in collections %}{% assign docs = collection.docs | where_exp:'doc','doc.sitemap != false' %}{% for doc in docs %} {{ doc.url | replace:'/index.html','/' | absolute_url | xml_escape }} {% if doc.last_modified_at or doc.date %}{{ doc.last_modified_at | default: doc.date | date_to_xmlschema }} {% endif %} {% endfor %}{% endfor %}{% assign pages = site.html_pages | where_exp:'doc','doc.sitemap != false' | where_exp:'doc','doc.url != \"/404.html\"' %}{% for page in pages %} {{ page.url | replace:'/index.html','/' | absolute_url | xml_escape }} {% if page.last_modified_at %}{{ page.last_modified_at | date_to_xmlschema }} {% endif %} {% endfor %}{% assign static_files = page.static_files | where_exp:'page','page.sitemap != false' | where_exp:'page','page.name != \"404.html\"' %}{% for file in static_files %} {{ file.path | replace:'/index.html','/' | absolute_url | xml_escape }} {{ file.modified_time | date_to_xmlschema }}  {% endfor %} ","url": "http://localhost:4000/sitemap.xml"
  },{
    "title": null,
    "excerpt":"Sitemap: {{ \"sitemap.xml\" | absolute_url }} ","url": "http://localhost:4000/robots.txt"
  },{
    "title": null,
    "excerpt":"{% if page.xsl %}{% endif %}Jekyll{{ site.time | date_to_xmlschema }}{{ page.url | absolute_url | xml_escape }}{% assign title = site.title | default: site.name %}{% if page.collection != \"posts\" %}{% assign collection = page.collection | capitalize %}{% assign title = title | append: \" | \" | append: collection %}{% endif %}{% if page.category %}{% assign category = page.category | capitalize %}{% assign title = title | append: \" | \" | append: category %}{% endif %}{% if title %}{{ title | smartify | xml_escape }}{% endif %}{% if site.description %}{{ site.description | xml_escape }}{% endif %}{% if site.author %}{{ site.author.name | default: site.author | xml_escape }}{% if site.author.email %}{{ site.author.email | xml_escape }}{% endif %}{% if site.author.uri %}{{ site.author.uri | xml_escape }}{% endif %}{% endif %}{% if page.tags %}{% assign posts = site.tags[page.tags] %}{% else %}{% assign posts = site[page.collection] %}{% endif %}{% if page.category %}{% assign posts = posts | where: \"category\", page.category %}{% endif %}{% unless site.show_drafts %}{% assign posts = posts | where_exp: \"post\", \"post.draft != true\" %}{% endunless %}{% assign posts = posts | sort: \"date\" | reverse %}{% assign posts_limit = site.feed.posts_limit | default: 10 %}{% for post in posts limit: posts_limit %}{% assign post_title = post.title | smartify | strip_html | normalize_whitespace | xml_escape %}{{ post_title }}{{ post.date | date_to_xmlschema }}{{ post.last_modified_at | default: post.date | date_to_xmlschema }}{{ post.id | absolute_url | xml_escape }}{% assign excerpt_only = post.feed.excerpt_only | default: site.feed.excerpt_only %}{% unless excerpt_only %}{{ post.content | strip | xml_escape }}{% endunless %}{% assign post_author = post.author | default: post.authors[0] | default: site.author %}{% assign post_author = site.data.authors[post_author] | default: post_author %}{% assign post_author_email = post_author.email | default: nil %}{% assign post_author_uri = post_author.uri | default: nil %}{% assign post_author_name = post_author.name | default: post_author %}{{ post_author_name | default: \"\" | xml_escape }}{% if post_author_email %}{{ post_author_email | xml_escape }}{% endif %}{% if post_author_uri %}{{ post_author_uri | xml_escape }}{% endif %}{% if post.category %}{% elsif post.categories %}{% for category in post.categories %}{% endfor %}{% endif %}{% for tag in post.tags %}{% endfor %}{% if post.excerpt and post.excerpt != empty %}{{ post.excerpt | strip_html | normalize_whitespace | xml_escape }}{% endif %}{% assign post_image = post.image.path | default: post.image %}{% if post_image %}{% unless post_image contains \"://\" %}{% assign post_image = post_image | absolute_url %}{% endunless %}{% endif %}{% endfor %}","url": "http://localhost:4000/feed.xml"
  }]
